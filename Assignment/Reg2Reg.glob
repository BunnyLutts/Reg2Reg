DIGEST fbbe88e25603a4cbdac0a2d4d6bb6e5f
FReg2Reg
R15:28 Coq.Lists.List <> <> lib
R46:62 Coq.ZArith.ZArith <> <> lib
R80:106 Coq.Classes.RelationClasses <> <> lib
R124:142 SetsClass.SetsClass <> <> lib
R152:163 SetsClass.SetsClass_AxiomFree SetsNotation <> mod
R173:185 Coq.Lists.List ListNotations <> mod
mod 526:526 <> O
ind 540:546 O reg_exp
constr 583:592 O EmptyStr_r
constr 610:615 O Char_r
constr 656:663 O Concat_r
constr 709:715 O Union_r
constr 756:761 O Star_r
binder 549:549 <> T:1
R623:626 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R622:622 Reg2Reg <> T:1 var
binder 618:618 <> t:4
R674:680 Reg2Reg <> reg_exp:2 ind
R682:682 Reg2Reg <> T:1 var
binder 666:667 <> r1:5
binder 669:670 <> r2:6
R726:732 Reg2Reg <> reg_exp:2 ind
R734:734 Reg2Reg <> T:1 var
binder 718:719 <> r1:7
binder 721:722 <> r2:8
R768:774 Reg2Reg <> reg_exp:2 ind
R776:776 Reg2Reg <> T:1 var
binder 764:764 <> r:9
R791:800 Reg2Reg O EmptyStr_r constr
R791:800 Reg2Reg O EmptyStr_r constr
R817:822 Reg2Reg O Char_r constr
R817:822 Reg2Reg O Char_r constr
R841:848 Reg2Reg O Concat_r constr
R841:848 Reg2Reg O Concat_r constr
R869:875 Reg2Reg O Union_r constr
R869:875 Reg2Reg O Union_r constr
R896:901 Reg2Reg O Star_r constr
R896:901 Reg2Reg O Star_r constr
def 949:956 O set_prod
binder 959:959 <> T:10
R975:978 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R969:972 Coq.Init.Datatypes <> list ind
R974:974 Reg2Reg <> T:10 var
binder 963:963 <> A:11
binder 965:965 <> B:12
R993:996 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R987:990 Coq.Init.Datatypes <> list ind
R992:992 Reg2Reg <> T:10 var
binder 1011:1011 <> s:13
R1016:1022 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R1028:1029 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 1023:1024 <> s1:14
binder 1026:1027 <> s2:15
R1038:1041 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R1032:1036 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'∈'_x not
R1030:1031 Reg2Reg <> s1:14 var
R1037:1037 Reg2Reg <> A:11 var
R1050:1053 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R1044:1048 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'∈'_x not
R1042:1043 Reg2Reg <> s2:15 var
R1049:1049 Reg2Reg <> B:12 var
R1055:1057 Coq.Init.Logic <> ::type_scope:x_'='_x not
R1054:1054 Reg2Reg <> s:13 var
R1060:1063 Coq.Init.Datatypes <> ::list_scope:x_'++'_x not
R1058:1059 Reg2Reg <> s1:14 var
R1064:1065 Reg2Reg <> s2:15 var
def 1078:1091 O star_r_indexed
binder 1094:1094 <> T:16
R1102:1104 Coq.Init.Datatypes <> nat ind
binder 1098:1098 <> n:17
R1118:1121 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1112:1115 Coq.Init.Datatypes <> list ind
R1117:1117 Reg2Reg <> T:16 var
binder 1108:1108 <> s:18
R1136:1139 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1130:1133 Coq.Init.Datatypes <> list ind
R1135:1135 Reg2Reg <> T:16 var
R1156:1156 Reg2Reg <> n:17 var
R1172:1173 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'['_x_']' not
R1177:1178 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'['_x_']' not
R1174:1176 Coq.Init.Datatypes <> nil constr
R1184:1184 Coq.Init.Datatypes <> S constr
R1192:1199 Reg2Reg O set_prod def
R1204:1217 Reg2Reg <> star_r_indexed:19 def
R1222:1222 Reg2Reg <> s:18 var
R1201:1201 Reg2Reg <> s:18 var
def 1372:1380 O exp_match
binder 1383:1383 <> T:21
R1391:1397 Reg2Reg O reg_exp ind
R1399:1399 Reg2Reg <> T:21 var
binder 1387:1387 <> r:22
R1410:1413 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1404:1407 Coq.Init.Datatypes <> list ind
R1409:1409 Reg2Reg <> T:21 var
R1430:1430 Reg2Reg <> r:22 var
R1441:1450 Reg2Reg O EmptyStr_r constr
R1455:1456 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'['_x_']' not
R1460:1461 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'['_x_']' not
R1457:1459 Coq.Init.Datatypes <> nil constr
R1467:1472 Reg2Reg O Char_r constr
binder 1483:1483 <> s:25
R1488:1494 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R1496:1497 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 1495:1495 <> c:26
R1505:1508 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R1499:1503 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'∈'_x not
R1498:1498 Reg2Reg <> c:26 var
R1510:1513 Coq.Init.Logic <> ::type_scope:x_'='_x not
R1524:1524 Coq.Init.Logic <> ::type_scope:x_'='_x not
R1509:1509 Reg2Reg <> s:25 var
R1514:1517 Coq.Init.Datatypes <> cons constr
R1521:1523 Coq.Init.Datatypes <> nil constr
R1519:1519 Reg2Reg <> c:26 var
R1530:1537 Reg2Reg O Concat_r constr
R1548:1555 Reg2Reg O set_prod def
R1573:1581 Reg2Reg <> exp_match:23 def
R1558:1566 Reg2Reg <> exp_match:23 def
R1591:1597 Reg2Reg O Union_r constr
R1608:1608 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'∪'_x not
R1621:1627 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'∪'_x not
R1640:1640 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'∪'_x not
R1609:1617 Reg2Reg <> exp_match:23 def
R1628:1636 Reg2Reg <> exp_match:23 def
R1646:1651 Reg2Reg O Star_r constr
R1658:1661 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'⋃'_x not
R1676:1689 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'⋃'_x not
R1662:1675 Reg2Reg O star_r_indexed def
R1678:1686 Reg2Reg <> exp_match:23 def
R1688:1688 Reg2Reg <> r:22 var
R1703:1703 Reg2Reg O <> mod
mod 2015:2015 <> I
ind 2029:2035 I reg_exp
constr 2061:2070 I EmptySet_r
constr 2087:2096 I EmptyStr_r
constr 2115:2124 I Optional_r
constr 2146:2151 I Char_r
constr 2192:2199 I Concat_r
constr 2245:2251 I Union_r
constr 2277:2284 I String_r
constr 2317:2322 I Plus_r
constr 2359:2364 I Star_r
binder 2038:2038 <> T:27
R2131:2137 Reg2Reg <> reg_exp:28 ind
R2139:2139 Reg2Reg <> T:27 var
binder 2127:2127 <> r:30
R2159:2162 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2158:2158 Reg2Reg <> T:27 var
binder 2154:2154 <> t:31
R2210:2216 Reg2Reg <> reg_exp:28 ind
R2218:2218 Reg2Reg <> T:27 var
binder 2202:2203 <> r1:32
binder 2205:2206 <> r2:33
R2262:2268 Reg2Reg <> reg_exp:28 ind
R2270:2270 Reg2Reg <> T:27 var
binder 2254:2255 <> r1:34
binder 2257:2258 <> r2:35
R2290:2293 Coq.Init.Datatypes <> list ind
R2295:2295 Reg2Reg <> T:27 var
binder 2287:2287 <> s:36
R2329:2335 Reg2Reg <> reg_exp:28 ind
R2337:2337 Reg2Reg <> T:27 var
binder 2325:2325 <> r:37
R2371:2377 Reg2Reg <> reg_exp:28 ind
R2379:2379 Reg2Reg <> T:27 var
binder 2367:2367 <> r:38
R2394:2403 Reg2Reg I EmptySet_r constr
R2394:2403 Reg2Reg I EmptySet_r constr
R2420:2429 Reg2Reg I EmptyStr_r constr
R2420:2429 Reg2Reg I EmptyStr_r constr
R2446:2455 Reg2Reg I Optional_r constr
R2446:2455 Reg2Reg I Optional_r constr
R2474:2479 Reg2Reg I Char_r constr
R2474:2479 Reg2Reg I Char_r constr
R2498:2505 Reg2Reg I Concat_r constr
R2498:2505 Reg2Reg I Concat_r constr
R2526:2532 Reg2Reg I Union_r constr
R2526:2532 Reg2Reg I Union_r constr
R2553:2560 Reg2Reg I String_r constr
R2553:2560 Reg2Reg I String_r constr
R2579:2584 Reg2Reg I Plus_r constr
R2579:2584 Reg2Reg I Plus_r constr
R2603:2608 Reg2Reg I Star_r constr
R2603:2608 Reg2Reg I Star_r constr
def 2627:2640 I plus_r_indexed
binder 2643:2643 <> T:39
R2651:2653 Coq.Init.Datatypes <> nat ind
binder 2647:2647 <> n:40
R2667:2670 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2661:2664 Coq.Init.Datatypes <> list ind
R2666:2666 Reg2Reg <> T:39 var
binder 2657:2657 <> s:41
R2685:2688 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2679:2682 Coq.Init.Datatypes <> list ind
R2684:2684 Reg2Reg <> T:39 var
R2705:2705 Reg2Reg <> n:40 var
R2721:2721 Reg2Reg <> s:41 var
R2727:2727 Coq.Init.Datatypes <> S constr
R2735:2744 Reg2Reg O set_prod def
R2749:2762 Reg2Reg <> plus_r_indexed:42 def
R2767:2767 Reg2Reg <> s:41 var
R2746:2746 Reg2Reg <> s:41 var
def 2835:2843 I exp_match
binder 2846:2846 <> T:44
R2853:2859 Reg2Reg I reg_exp ind
R2861:2861 Reg2Reg <> T:44 var
binder 2850:2850 <> r:45
R2872:2875 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R2866:2869 Coq.Init.Datatypes <> list ind
R2871:2871 Reg2Reg <> T:44 var
R2894:2894 Reg2Reg <> r:45 var
R2907:2916 Reg2Reg I EmptySet_r constr
R2921:2923 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'∅' not
R2931:2940 Reg2Reg I EmptyStr_r constr
R2945:2945 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'['_x_']' not
R2949:2949 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'['_x_']' not
R2946:2948 Coq.Init.Datatypes <> nil constr
R2957:2966 Reg2Reg I Optional_r constr
R2978:2983 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'∪'_x not
R2995:2995 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'∪'_x not
R2973:2973 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'['_x_']' not
R2977:2977 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'['_x_']' not
R2974:2976 Coq.Init.Datatypes <> nil constr
R2984:2992 Reg2Reg <> exp_match:46 def
R2994:2994 Reg2Reg <> r:45 var
R3003:3008 Reg2Reg I Char_r constr
binder 3019:3019 <> s:48
R3024:3030 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R3032:3033 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 3031:3031 <> c:49
R3041:3044 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R3035:3039 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'∈'_x not
R3034:3034 Reg2Reg <> c:49 var
R3046:3049 Coq.Init.Logic <> ::type_scope:x_'='_x not
R3060:3060 Coq.Init.Logic <> ::type_scope:x_'='_x not
R3045:3045 Reg2Reg <> s:48 var
R3050:3053 Coq.Init.Datatypes <> cons constr
R3057:3059 Coq.Init.Datatypes <> nil constr
R3055:3055 Reg2Reg <> c:49 var
R3068:3075 Reg2Reg I Concat_r constr
R3086:3095 Reg2Reg O set_prod def
R3113:3121 Reg2Reg <> exp_match:46 def
R3098:3106 Reg2Reg <> exp_match:46 def
R3133:3139 Reg2Reg I Union_r constr
R3150:3150 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'∪'_x not
R3163:3169 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'∪'_x not
R3182:3182 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'∪'_x not
R3151:3159 Reg2Reg <> exp_match:46 def
R3170:3178 Reg2Reg <> exp_match:46 def
R3190:3197 Reg2Reg I String_r constr
R3204:3204 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'['_x_']' not
R3206:3206 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'['_x_']' not
R3214:3219 Reg2Reg I Plus_r constr
R3226:3229 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'⋃'_x not
R3244:3257 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'⋃'_x not
R3230:3243 Reg2Reg I plus_r_indexed def
R3246:3254 Reg2Reg <> exp_match:46 def
R3256:3256 Reg2Reg <> r:45 var
R3265:3270 Reg2Reg I Star_r constr
R3277:3280 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'⋃'_x not
R3297:3310 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'⋃'_x not
R3281:3296 Reg2Reg O star_r_indexed def
R3299:3307 Reg2Reg <> exp_match:46 def
R3309:3309 Reg2Reg <> r:45 var
R3326:3326 Reg2Reg I <> mod
def 3379:3388 <> string2reg
binder 3391:3391 <> T:50
R3403:3406 Coq.Init.Datatypes <> list ind
R3408:3408 Reg2Reg <> T:50 var
binder 3400:3400 <> s:51
R3412:3420 Reg2Reg <> reg_exp ind
R3422:3422 Reg2Reg <> T:50 var
R3437:3437 Reg2Reg <> s:51 var
R3450:3452 Coq.Init.Datatypes <> nil constr
R3457:3468 Reg2Reg <> EmptyStr_r constr
R3476:3479 Coq.Init.Datatypes <> cons constr
R3489:3498 Reg2Reg <> Concat_r constr
R3529:3538 Reg2Reg <> string2reg:52 def
R3501:3508 Reg2Reg <> Char_r constr
binder 3515:3515 <> x:54
R3521:3523 Coq.Init.Logic <> ::type_scope:x_'='_x not
R3520:3520 Reg2Reg <> x:54 var
ind 3564:3575 <> trans_result
constr 3603:3607 <> Empty
constr 3615:3618 <> Data
binder 3578:3578 <> T:55
R3625:3633 Reg2Reg <> reg_exp ind
R3635:3635 Reg2Reg <> T:55 var
binder 3621:3621 <> r:58
R3650:3654 Reg2Reg <> Empty constr
R3650:3654 Reg2Reg <> Empty constr
R3671:3674 Reg2Reg <> Data constr
R3671:3674 Reg2Reg <> Data constr
prf 3690:3705 <> trans_result_inj
binder 3708:3708 <> T:59
R3737:3745 Reg2Reg <> reg_exp ind
R3747:3747 Reg2Reg <> T:59 var
binder 3730:3731 <> r1:60
binder 3733:3734 <> r2:61
R3776:3779 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R3766:3768 Coq.Init.Logic <> ::type_scope:x_'='_x not
R3759:3762 Reg2Reg <> Data constr
R3764:3765 Reg2Reg <> r1:60 var
R3769:3772 Reg2Reg <> Data constr
R3774:3775 Reg2Reg <> r2:61 var
R3782:3784 Coq.Init.Logic <> ::type_scope:x_'='_x not
R3780:3781 Reg2Reg <> r1:60 var
R3785:3786 Reg2Reg <> r2:61 var
def 3878:3882 <> trans
binder 3885:3885 <> T:62
R3897:3905 Reg2Reg <> reg_exp ind
R3907:3907 Reg2Reg <> T:62 var
binder 3894:3894 <> r:63
R3911:3922 Reg2Reg <> trans_result ind
R3924:3924 Reg2Reg <> T:62 var
R3939:3939 Reg2Reg <> r:63 var
R3952:3963 Reg2Reg <> EmptySet_r constr
R3968:3972 Reg2Reg <> Empty constr
R3993:4004 Reg2Reg <> EmptyStr_r constr
R4009:4012 Reg2Reg <> Data constr
R4014:4025 Reg2Reg <> EmptyStr_r constr
R4048:4059 Reg2Reg <> Optional_r constr
R4082:4086 Reg2Reg <> trans:64 def
R4088:4088 Reg2Reg <> r:63 var
R4106:4110 Reg2Reg <> Empty constr
R4115:4118 Reg2Reg <> Data constr
R4121:4132 Reg2Reg <> EmptyStr_r constr
R4145:4148 Reg2Reg <> Data constr
R4156:4159 Reg2Reg <> Data constr
R4162:4170 Reg2Reg <> Union_r constr
R4173:4184 Reg2Reg <> EmptyStr_r constr
R4209:4216 Reg2Reg <> Char_r constr
R4223:4226 Reg2Reg <> Data constr
R4229:4236 Reg2Reg <> Char_r constr
R4268:4277 Reg2Reg <> Concat_r constr
R4316:4320 Reg2Reg <> trans:64 def
R4304:4308 Reg2Reg <> trans:64 def
R4341:4345 Reg2Reg <> Empty constr
R4348:4352 Reg2Reg <> Empty constr
R4357:4361 Reg2Reg <> Empty constr
R4373:4377 Reg2Reg <> Empty constr
R4380:4383 Reg2Reg <> Data constr
R4392:4396 Reg2Reg <> Empty constr
R4408:4411 Reg2Reg <> Data constr
R4418:4422 Reg2Reg <> Empty constr
R4427:4431 Reg2Reg <> Empty constr
R4443:4446 Reg2Reg <> Data constr
R4453:4456 Reg2Reg <> Data constr
R4465:4468 Reg2Reg <> Data constr
R4471:4480 Reg2Reg <> Concat_r constr
R4531:4539 Reg2Reg <> Union_r constr
R4578:4582 Reg2Reg <> trans:64 def
R4566:4570 Reg2Reg <> trans:64 def
R4603:4607 Reg2Reg <> Empty constr
R4610:4614 Reg2Reg <> Empty constr
R4619:4623 Reg2Reg <> Empty constr
R4635:4639 Reg2Reg <> Empty constr
R4642:4645 Reg2Reg <> Data constr
R4654:4657 Reg2Reg <> Data constr
R4673:4676 Reg2Reg <> Data constr
R4683:4687 Reg2Reg <> Empty constr
R4692:4695 Reg2Reg <> Data constr
R4711:4714 Reg2Reg <> Data constr
R4721:4724 Reg2Reg <> Data constr
R4733:4736 Reg2Reg <> Data constr
R4739:4747 Reg2Reg <> Union_r constr
R4776:4785 Reg2Reg <> String_r constr
R4792:4795 Reg2Reg <> Data constr
R4798:4807 Reg2Reg <> string2reg def
R4835:4842 Reg2Reg <> Plus_r constr
R4865:4869 Reg2Reg <> trans:64 def
R4871:4871 Reg2Reg <> r:63 var
R4889:4893 Reg2Reg <> Empty constr
R4898:4902 Reg2Reg <> Empty constr
R4914:4917 Reg2Reg <> Data constr
R4925:4928 Reg2Reg <> Data constr
R4931:4940 Reg2Reg <> Concat_r constr
R4946:4953 Reg2Reg <> Star_r constr
R4995:5002 Reg2Reg <> Star_r constr
R5025:5029 Reg2Reg <> trans:64 def
R5031:5031 Reg2Reg <> r:63 var
R5050:5054 Reg2Reg <> Empty constr
R5059:5062 Reg2Reg <> Data constr
R5064:5075 Reg2Reg <> EmptyStr_r constr
R5087:5090 Reg2Reg <> Data constr
R5098:5101 Reg2Reg <> Data constr
R5104:5111 Reg2Reg <> Star_r constr
prf 5180:5193 <> set_prod_equiv
binder 5208:5208 <> T:66
R5228:5231 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5222:5225 Coq.Init.Datatypes <> list ind
R5227:5227 Reg2Reg <> T:66 var
binder 5212:5212 <> A:67
binder 5214:5214 <> B:68
binder 5216:5216 <> C:69
binder 5218:5218 <> D:70
R5253:5256 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5248:5251 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'=='_x not
R5247:5247 Reg2Reg <> A:67 var
R5252:5252 Reg2Reg <> C:69 var
R5263:5266 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5258:5261 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'=='_x not
R5257:5257 Reg2Reg <> B:68 var
R5262:5262 Reg2Reg <> D:70 var
R5281:5284 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'=='_x not
R5267:5276 Reg2Reg <> set_prod def
R5280:5280 Reg2Reg <> B:68 var
R5278:5278 Reg2Reg <> A:67 var
R5285:5294 Reg2Reg <> set_prod def
R5298:5298 Reg2Reg <> D:70 var
R5296:5296 Reg2Reg <> C:69 var
R5323:5332 Reg2Reg <> set_prod def
prf 5627:5639 <> set_equiv_ref
binder 5654:5654 <> T:71
R5663:5666 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5662:5662 Reg2Reg <> T:71 var
binder 5658:5658 <> A:72
R5683:5686 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'=='_x not
R5682:5682 Reg2Reg <> A:72 var
R5687:5687 Reg2Reg <> A:72 var
prf 5764:5782 <> set_prod_equiv_left
binder 5797:5797 <> T:73
R5815:5818 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5809:5812 Coq.Init.Datatypes <> list ind
R5814:5814 Reg2Reg <> T:73 var
binder 5801:5801 <> A:74
binder 5803:5803 <> B:75
binder 5805:5805 <> C:76
R5840:5843 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5835:5838 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'=='_x not
R5834:5834 Reg2Reg <> A:74 var
R5839:5839 Reg2Reg <> C:76 var
R5858:5861 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'=='_x not
R5844:5853 Reg2Reg <> set_prod def
R5857:5857 Reg2Reg <> B:75 var
R5855:5855 Reg2Reg <> A:74 var
R5862:5871 Reg2Reg <> set_prod def
R5875:5875 Reg2Reg <> B:75 var
R5873:5873 Reg2Reg <> C:76 var
R5904:5917 Reg2Reg <> set_prod_equiv thm
R5930:5942 Reg2Reg <> set_equiv_ref thm
R5904:5917 Reg2Reg <> set_prod_equiv thm
R5930:5942 Reg2Reg <> set_equiv_ref thm
prf 6004:6023 <> set_prod_equiv_right
binder 6038:6038 <> T:77
R6056:6059 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6050:6053 Coq.Init.Datatypes <> list ind
R6055:6055 Reg2Reg <> T:77 var
binder 6042:6042 <> A:78
binder 6044:6044 <> B:79
binder 6046:6046 <> C:80
R6081:6084 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6076:6079 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'=='_x not
R6075:6075 Reg2Reg <> B:79 var
R6080:6080 Reg2Reg <> C:80 var
R6099:6102 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'=='_x not
R6085:6094 Reg2Reg <> set_prod def
R6098:6098 Reg2Reg <> B:79 var
R6096:6096 Reg2Reg <> A:78 var
R6103:6112 Reg2Reg <> set_prod def
R6116:6116 Reg2Reg <> C:80 var
R6114:6114 Reg2Reg <> A:78 var
R6146:6159 Reg2Reg <> set_prod_equiv thm
R6170:6182 Reg2Reg <> set_equiv_ref thm
R6146:6159 Reg2Reg <> set_prod_equiv thm
R6170:6182 Reg2Reg <> set_equiv_ref thm
prf 6240:6258 <> set_prod_left_empty
binder 6273:6273 <> T:81
R6287:6290 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6281:6284 Coq.Init.Datatypes <> list ind
R6286:6286 Reg2Reg <> T:81 var
binder 6277:6277 <> s:82
R6322:6325 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'=='_x not
R6306:6315 Reg2Reg <> set_prod def
R6321:6321 Reg2Reg <> s:82 var
R6317:6319 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'∅' not
R6326:6328 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'∅' not
R6353:6362 Reg2Reg <> set_prod def
prf 6465:6484 <> set_prod_right_empty
binder 6500:6500 <> T:83
R6514:6517 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6508:6511 Coq.Init.Datatypes <> list ind
R6513:6513 Reg2Reg <> T:83 var
binder 6504:6504 <> s:84
R6549:6552 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'=='_x not
R6533:6542 Reg2Reg <> set_prod def
R6546:6548 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'∅' not
R6544:6544 Reg2Reg <> s:84 var
R6553:6555 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'∅' not
R6580:6589 Reg2Reg <> set_prod def
prf 6686:6696 <> trans_empty
binder 6711:6711 <> T:85
R6720:6728 Reg2Reg <> reg_exp ind
R6730:6730 Reg2Reg <> T:85 var
binder 6715:6716 <> r1:86
R6758:6761 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6750:6752 Coq.Init.Logic <> ::type_scope:x_'='_x not
R6742:6746 Reg2Reg <> trans def
R6748:6749 Reg2Reg <> r1:86 var
R6753:6757 Reg2Reg <> Empty constr
R6776:6779 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'=='_x not
R6762:6772 Reg2Reg <> exp_match def
R6774:6775 Reg2Reg <> r1:86 var
R6780:6782 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'∅' not
R6899:6903 Reg2Reg <> trans def
R6899:6903 Reg2Reg <> trans def
R7028:7032 Reg2Reg <> trans def
R7028:7032 Reg2Reg <> trans def
R7061:7065 Reg2Reg <> trans def
R7061:7065 Reg2Reg <> trans def
R7181:7194 Reg2Reg <> set_prod_equiv thm
R7181:7194 Reg2Reg <> set_prod_equiv thm
R7237:7255 Reg2Reg <> set_prod_left_empty thm
R7237:7255 Reg2Reg <> set_prod_left_empty thm
R7309:7327 Reg2Reg <> set_prod_equiv_left thm
R7350:7352 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'∅' not
R7332:7342 Reg2Reg <> exp_match def
R7309:7327 Reg2Reg <> set_prod_equiv_left thm
R7350:7352 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'∅' not
R7332:7342 Reg2Reg <> exp_match def
R7384:7402 Reg2Reg <> set_prod_left_empty thm
R7384:7402 Reg2Reg <> set_prod_left_empty thm
R7456:7475 Reg2Reg <> set_prod_equiv_right thm
R7498:7500 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'∅' not
R7478:7488 Reg2Reg <> exp_match def
R7456:7475 Reg2Reg <> set_prod_equiv_right thm
R7498:7500 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'∅' not
R7478:7488 Reg2Reg <> exp_match def
R7532:7551 Reg2Reg <> set_prod_right_empty thm
R7532:7551 Reg2Reg <> set_prod_right_empty thm
R7607:7611 Reg2Reg <> trans def
R7607:7611 Reg2Reg <> trans def
R7640:7644 Reg2Reg <> trans def
R7640:7644 Reg2Reg <> trans def
R7774:7791 SetsClass.SetsDomain <> Sets_union_empty_l thm
R7774:7791 SetsClass.SetsDomain <> Sets_union_empty_l thm
R7845:7849 Reg2Reg <> trans def
R7845:7849 Reg2Reg <> trans def
R7910:7930 SetsClass.SetsDomain <> Sets_equiv_empty_fact thm
R7910:7930 SetsClass.SetsDomain <> Sets_equiv_empty_fact thm
R7943:7969 SetsClass.SetsDomain <> Sets_indexed_union_included meth
R7943:7969 SetsClass.SetsDomain <> Sets_indexed_union_included meth
R8069:8087 Reg2Reg <> set_prod_equiv_left thm
R8129:8131 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'∅' not
R8092:8107 Reg2Reg <> plus_r_indexed def
R8112:8122 Reg2Reg <> exp_match def
R8069:8087 Reg2Reg <> set_prod_equiv_left thm
R8129:8131 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'∅' not
R8092:8107 Reg2Reg <> plus_r_indexed def
R8112:8122 Reg2Reg <> exp_match def
R8173:8191 Reg2Reg <> set_prod_left_empty thm
R8194:8209 Reg2Reg <> plus_r_indexed def
R8214:8224 Reg2Reg <> exp_match def
R8173:8191 Reg2Reg <> set_prod_left_empty thm
R8194:8209 Reg2Reg <> plus_r_indexed def
R8214:8224 Reg2Reg <> exp_match def
R8323:8327 Reg2Reg <> trans def
R8323:8327 Reg2Reg <> trans def
def 8486:8500 <> trans_correct_p
binder 8503:8503 <> T:87
R8512:8520 Reg2Reg <> reg_exp ind
R8522:8522 Reg2Reg <> T:87 var
binder 8507:8508 <> r1:88
R8551:8559 Reg2Reg <> reg_exp ind
R8561:8561 Reg2Reg <> T:87 var
binder 8546:8547 <> r2:89
R8583:8586 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8572:8574 Coq.Init.Logic <> ::type_scope:x_'='_x not
R8565:8568 Reg2Reg <> Data constr
R8570:8571 Reg2Reg <> r2:89 var
R8575:8579 Reg2Reg <> trans def
R8581:8582 Reg2Reg <> r1:88 var
R8601:8604 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'=='_x not
R8587:8597 Reg2Reg <> exp_match def
R8599:8600 Reg2Reg <> r1:88 var
R8605:8615 Reg2Reg <> exp_match def
R8617:8618 Reg2Reg <> r2:89 var
prf 8628:8649 <> trans_EmptySet_correct
binder 8665:8665 <> T:90
R8674:8682 Reg2Reg <> reg_exp ind
R8684:8684 Reg2Reg <> T:90 var
binder 8669:8670 <> r1:91
R8713:8716 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8698:8700 Coq.Init.Logic <> ::type_scope:x_'='_x not
R8696:8697 Reg2Reg <> r1:91 var
R8701:8712 Reg2Reg <> EmptySet_r constr
R8717:8731 Reg2Reg <> trans_correct_p def
R8733:8734 Reg2Reg <> r1:91 var
R8767:8777 Reg2Reg <> exp_match def
R8780:8790 Reg2Reg <> exp_match def
R8793:8807 Reg2Reg <> trans_correct_p def
R8833:8837 Reg2Reg <> trans def
prf 8898:8919 <> trans_EmptyStr_correct
binder 8935:8935 <> T:92
R8951:8959 Reg2Reg <> reg_exp ind
R8961:8961 Reg2Reg <> T:92 var
binder 8946:8947 <> r1:93
R8990:8993 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8975:8977 Coq.Init.Logic <> ::type_scope:x_'='_x not
R8973:8974 Reg2Reg <> r1:93 var
R8978:8989 Reg2Reg <> EmptyStr_r constr
R8994:9008 Reg2Reg <> trans_correct_p def
R9010:9011 Reg2Reg <> r1:93 var
R9044:9054 Reg2Reg <> exp_match def
R9057:9067 Reg2Reg <> exp_match def
R9070:9084 Reg2Reg <> trans_correct_p def
R9110:9114 Reg2Reg <> trans def
R9154:9169 Reg2Reg <> trans_result_inj thm
R9154:9169 Reg2Reg <> trans_result_inj thm
R9205:9215 Reg2Reg <> exp_match def
R9218:9228 Reg2Reg <> exp_match def
prf 9275:9296 <> trans_Optional_correct
binder 9311:9311 <> T:94
R9327:9335 Reg2Reg <> reg_exp ind
R9337:9337 Reg2Reg <> T:94 var
binder 9322:9323 <> r1:95
R9346:9354 Reg2Reg <> reg_exp ind
R9356:9356 Reg2Reg <> T:94 var
binder 9341:9342 <> r0:96
R9388:9391 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R9370:9372 Coq.Init.Logic <> ::type_scope:x_'='_x not
R9368:9369 Reg2Reg <> r1:95 var
R9373:9384 Reg2Reg <> Optional_r constr
R9386:9387 Reg2Reg <> r0:96 var
R9410:9413 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R9392:9406 Reg2Reg <> trans_correct_p def
R9408:9409 Reg2Reg <> r0:96 var
R9414:9428 Reg2Reg <> trans_correct_p def
R9430:9431 Reg2Reg <> r1:95 var
R9464:9474 Reg2Reg <> exp_match def
R9477:9487 Reg2Reg <> exp_match def
R9490:9504 Reg2Reg <> trans_correct_p def
R9518:9532 Reg2Reg <> trans_correct_p def
R9573:9577 Reg2Reg <> trans def
R9573:9577 Reg2Reg <> trans def
R9652:9662 Reg2Reg <> trans_empty thm
R9652:9662 Reg2Reg <> trans_empty thm
R9872:9889 SetsClass.SetsDomain <> Sets_union_empty_r thm
R9872:9889 SetsClass.SetsDomain <> Sets_union_empty_r thm
R9872:9889 SetsClass.SetsDomain <> Sets_union_empty_r thm
R9939:9945 Coq.Init.Logic <> eq_refl constr
R9939:9945 Coq.Init.Logic <> eq_refl constr
R10026:10041 Reg2Reg <> trans_result_inj thm
R10026:10041 Reg2Reg <> trans_result_inj thm
R10079:10102 SetsClass.SetsDomain <> Sets_equiv_Sets_included meth
R10079:10102 SetsClass.SetsDomain <> Sets_equiv_Sets_included meth
R10134:10157 SetsClass.SetsDomain <> Sets_equiv_Sets_included meth
R10134:10157 SetsClass.SetsDomain <> Sets_equiv_Sets_included meth
R10186:10204 SetsClass.SetsDomain <> Sets_union_included thm
R10186:10204 SetsClass.SetsDomain <> Sets_union_included thm
R10221:10240 SetsClass.SetsDomain <> Sets_included_union1 meth
R10221:10240 SetsClass.SetsDomain <> Sets_included_union1 meth
R10277:10296 SetsClass.SetsDomain <> Sets_included_union2 meth
R10277:10296 SetsClass.SetsDomain <> Sets_included_union2 meth
R10311:10329 SetsClass.SetsDomain <> Sets_union_included thm
R10311:10329 SetsClass.SetsDomain <> Sets_union_included thm
R10346:10365 SetsClass.SetsDomain <> Sets_included_union1 meth
R10346:10365 SetsClass.SetsDomain <> Sets_included_union1 meth
R10402:10421 SetsClass.SetsDomain <> Sets_included_union2 meth
R10402:10421 SetsClass.SetsDomain <> Sets_included_union2 meth
prf 10436:10453 <> trans_Char_correct
binder 10468:10468 <> T:97
R10484:10492 Reg2Reg <> reg_exp ind
R10494:10494 Reg2Reg <> T:97 var
binder 10479:10480 <> r1:98
R10503:10506 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10502:10502 Reg2Reg <> T:97 var
binder 10498:10498 <> t:99
R10537:10540 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10524:10526 Coq.Init.Logic <> ::type_scope:x_'='_x not
R10522:10523 Reg2Reg <> r1:98 var
R10527:10534 Reg2Reg <> Char_r constr
R10536:10536 Reg2Reg <> t:99 var
R10541:10555 Reg2Reg <> trans_correct_p def
R10557:10558 Reg2Reg <> r1:98 var
prf 10585:10604 <> trans_Concat_correct
binder 10619:10619 <> T:100
R10639:10647 Reg2Reg <> reg_exp ind
R10649:10649 Reg2Reg <> T:100 var
binder 10630:10630 <> r:101
binder 10632:10633 <> r1:102
binder 10635:10636 <> r2:103
R10681:10684 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10662:10664 Coq.Init.Logic <> ::type_scope:x_'='_x not
R10661:10661 Reg2Reg <> r:101 var
R10665:10674 Reg2Reg <> Concat_r constr
R10679:10680 Reg2Reg <> r2:103 var
R10676:10677 Reg2Reg <> r1:102 var
R10703:10706 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10685:10699 Reg2Reg <> trans_correct_p def
R10701:10702 Reg2Reg <> r1:102 var
R10725:10728 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10707:10721 Reg2Reg <> trans_correct_p def
R10723:10724 Reg2Reg <> r2:103 var
R10729:10743 Reg2Reg <> trans_correct_p def
R10745:10745 Reg2Reg <> r:101 var
prf 10772:10790 <> trans_Union_correct
binder 10805:10805 <> T:104
R10826:10834 Reg2Reg <> reg_exp ind
R10836:10836 Reg2Reg <> T:104 var
binder 10816:10816 <> r:105
binder 10818:10819 <> r1:106
binder 10821:10822 <> r2:107
R10867:10870 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10849:10851 Coq.Init.Logic <> ::type_scope:x_'='_x not
R10848:10848 Reg2Reg <> r:105 var
R10852:10860 Reg2Reg <> Union_r constr
R10865:10866 Reg2Reg <> r2:107 var
R10862:10863 Reg2Reg <> r1:106 var
R10889:10892 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10871:10885 Reg2Reg <> trans_correct_p def
R10887:10888 Reg2Reg <> r1:106 var
R10911:10914 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R10893:10907 Reg2Reg <> trans_correct_p def
R10909:10910 Reg2Reg <> r2:107 var
R10915:10929 Reg2Reg <> trans_correct_p def
R10931:10931 Reg2Reg <> r:105 var
prf 10958:10977 <> trans_String_correct
binder 10992:10992 <> T:108
R11007:11015 Reg2Reg <> reg_exp ind
R11017:11017 Reg2Reg <> T:108 var
binder 11003:11003 <> r:109
R11025:11028 Coq.Init.Datatypes <> list ind
R11030:11030 Reg2Reg <> T:108 var
binder 11021:11021 <> s:110
R11058:11061 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11043:11045 Coq.Init.Logic <> ::type_scope:x_'='_x not
R11042:11042 Reg2Reg <> r:109 var
R11046:11055 Reg2Reg <> String_r constr
R11057:11057 Reg2Reg <> s:110 var
R11062:11076 Reg2Reg <> trans_correct_p def
R11078:11078 Reg2Reg <> r:109 var
prf 11105:11122 <> trans_Plus_correct
binder 11137:11137 <> T:111
R11155:11163 Reg2Reg <> reg_exp ind
R11165:11165 Reg2Reg <> T:111 var
binder 11148:11148 <> r:112
binder 11150:11151 <> r1:113
R11192:11195 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11178:11180 Coq.Init.Logic <> ::type_scope:x_'='_x not
R11177:11177 Reg2Reg <> r:112 var
R11181:11188 Reg2Reg <> Plus_r constr
R11190:11191 Reg2Reg <> r1:113 var
R11214:11217 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11196:11210 Reg2Reg <> trans_correct_p def
R11212:11213 Reg2Reg <> r1:113 var
R11218:11232 Reg2Reg <> trans_correct_p def
R11234:11234 Reg2Reg <> r:112 var
prf 11261:11278 <> trans_Star_correct
binder 11293:11293 <> T:114
R11311:11319 Reg2Reg <> reg_exp ind
R11321:11321 Reg2Reg <> T:114 var
binder 11304:11304 <> r:115
binder 11306:11307 <> r1:116
R11348:11351 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11334:11336 Coq.Init.Logic <> ::type_scope:x_'='_x not
R11333:11333 Reg2Reg <> r:115 var
R11337:11344 Reg2Reg <> Star_r constr
R11346:11347 Reg2Reg <> r1:116 var
R11370:11373 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11352:11366 Reg2Reg <> trans_correct_p def
R11368:11369 Reg2Reg <> r1:116 var
R11374:11388 Reg2Reg <> trans_correct_p def
R11390:11390 Reg2Reg <> r:115 var
prf 11476:11488 <> trans_correct
binder 11503:11503 <> T:117
R11512:11520 Reg2Reg <> reg_exp ind
R11522:11522 Reg2Reg <> T:117 var
binder 11507:11508 <> r1:118
R11526:11540 Reg2Reg <> trans_correct_p def
R11542:11543 Reg2Reg <> r1:118 var
R11595:11616 Reg2Reg <> trans_EmptySet_correct thm
R11595:11616 Reg2Reg <> trans_EmptySet_correct thm
R11644:11665 Reg2Reg <> trans_EmptyStr_correct thm
R11644:11665 Reg2Reg <> trans_EmptyStr_correct thm
R11698:11719 Reg2Reg <> trans_Optional_correct thm
R11742:11748 Coq.Init.Logic <> eq_refl constr
R11722:11733 Reg2Reg <> Optional_r constr
R11762:11762 SetsClass.SetProd <> H def
R11698:11719 Reg2Reg <> trans_Optional_correct thm
R11742:11748 Coq.Init.Logic <> eq_refl constr
R11722:11733 Reg2Reg <> Optional_r constr
R11782:11799 Reg2Reg <> trans_Char_correct prfax
R11816:11822 Coq.Init.Logic <> eq_refl constr
R11802:11809 Reg2Reg <> Char_r constr
R11831:11831 SetsClass.SetProd <> H def
R11782:11799 Reg2Reg <> trans_Char_correct prfax
R11816:11822 Coq.Init.Logic <> eq_refl constr
R11802:11809 Reg2Reg <> Char_r constr
R11851:11870 Reg2Reg <> trans_Concat_correct prfax
R11905:11911 Coq.Init.Logic <> eq_refl constr
R11873:11882 Reg2Reg <> Concat_r constr
R11934:11934 SetsClass.SetProd <> H def
R11851:11870 Reg2Reg <> trans_Concat_correct prfax
R11905:11911 Coq.Init.Logic <> eq_refl constr
R11873:11882 Reg2Reg <> Concat_r constr
R11954:11972 Reg2Reg <> trans_Union_correct prfax
R12006:12012 Coq.Init.Logic <> eq_refl constr
R11975:11983 Reg2Reg <> Union_r constr
R12035:12035 SetsClass.SetProd <> H def
R11954:11972 Reg2Reg <> trans_Union_correct prfax
R12006:12012 Coq.Init.Logic <> eq_refl constr
R11975:11983 Reg2Reg <> Union_r constr
R12055:12074 Reg2Reg <> trans_String_correct prfax
R12093:12099 Coq.Init.Logic <> eq_refl constr
R12077:12086 Reg2Reg <> String_r constr
R12108:12108 SetsClass.SetProd <> H def
R12055:12074 Reg2Reg <> trans_String_correct prfax
R12093:12099 Coq.Init.Logic <> eq_refl constr
R12077:12086 Reg2Reg <> String_r constr
R12128:12145 Reg2Reg <> trans_Plus_correct prfax
R12164:12170 Coq.Init.Logic <> eq_refl constr
R12148:12155 Reg2Reg <> Plus_r constr
R12184:12184 SetsClass.SetProd <> H def
R12128:12145 Reg2Reg <> trans_Plus_correct prfax
R12164:12170 Coq.Init.Logic <> eq_refl constr
R12148:12155 Reg2Reg <> Plus_r constr
R12204:12221 Reg2Reg <> trans_Star_correct prfax
R12240:12246 Coq.Init.Logic <> eq_refl constr
R12224:12231 Reg2Reg <> Star_r constr
R12260:12260 SetsClass.SetProd <> H def
R12204:12221 Reg2Reg <> trans_Star_correct prfax
R12240:12246 Coq.Init.Logic <> eq_refl constr
R12224:12231 Reg2Reg <> Star_r constr
def 12327:12332 <> reduce
binder 12335:12335 <> T:119
R12343:12351 Reg2Reg <> reg_exp ind
R12353:12353 Reg2Reg <> T:119 var
binder 12339:12339 <> r:120
R12358:12366 Reg2Reg <> reg_exp ind
R12368:12368 Reg2Reg <> T:119 var
R12384:12384 Reg2Reg <> r:120 var
R12397:12408 Reg2Reg <> EmptyStr_r constr
R12413:12424 Reg2Reg <> EmptyStr_r constr
R12432:12439 Reg2Reg <> Char_r constr
R12446:12453 Reg2Reg <> Char_r constr
R12463:12472 Reg2Reg <> Concat_r constr
R12512:12517 Reg2Reg <> reduce:121 def
R12499:12504 Reg2Reg <> reduce:121 def
R12538:12549 Reg2Reg <> EmptyStr_r constr
R12552:12563 Reg2Reg <> EmptyStr_r constr
R12568:12579 Reg2Reg <> EmptyStr_r constr
R12591:12602 Reg2Reg <> EmptyStr_r constr
R12610:12615 Reg2Reg <> reduce:121 def
R12633:12644 Reg2Reg <> EmptyStr_r constr
R12649:12654 Reg2Reg <> reduce:121 def
R12677:12686 Reg2Reg <> Concat_r constr
R12701:12706 Reg2Reg <> reduce:121 def
R12689:12694 Reg2Reg <> reduce:121 def
R12730:12738 Reg2Reg <> Union_r constr
R12749:12757 Reg2Reg <> Union_r constr
R12772:12777 Reg2Reg <> reduce:121 def
R12760:12765 Reg2Reg <> reduce:121 def
R12789:12796 Reg2Reg <> Star_r constr
R12804:12811 Reg2Reg <> Star_r constr
R12814:12819 Reg2Reg <> reduce:121 def
def 12919:12934 <> reduce_correct_p
binder 12937:12937 <> T:123
R12945:12953 Reg2Reg <> reg_exp ind
R12955:12955 Reg2Reg <> T:123 var
binder 12941:12941 <> r:124
R12983:12991 Reg2Reg <> reg_exp ind
R12993:12993 Reg2Reg <> T:123 var
binder 12978:12979 <> r1:125
R13011:13014 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12998:13001 Coq.Init.Logic <> ::type_scope:x_'='_x not
R13010:13010 Coq.Init.Logic <> ::type_scope:x_'='_x not
R12996:12997 Reg2Reg <> r1:125 var
R13002:13007 Reg2Reg <> reduce def
R13009:13009 Reg2Reg <> r:124 var
R13028:13031 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'=='_x not
R13015:13025 Reg2Reg <> exp_match def
R13027:13027 Reg2Reg <> r:124 var
R13032:13042 Reg2Reg <> exp_match def
R13044:13045 Reg2Reg <> r1:125 var
prf 13082:13098 <> set_prod_left_nil
binder 13113:13113 <> T:126
R13132:13135 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13126:13129 Coq.Init.Datatypes <> list ind
R13131:13131 Reg2Reg <> T:126 var
binder 13122:13122 <> s:127
R13169:13172 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'=='_x not
R13151:13160 Reg2Reg <> set_prod def
R13168:13168 Reg2Reg <> s:127 var
R13162:13162 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'['_x_']' not
R13166:13166 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'['_x_']' not
R13163:13165 Coq.Init.Datatypes <> nil constr
R13173:13173 Reg2Reg <> s:127 var
R13194:13203 Reg2Reg <> set_prod def
R13294:13294 SetsClass.SetProd <> H def
R13330:13338 Coq.Lists.List <> app_nil_l thm
R13330:13338 Coq.Lists.List <> app_nil_l thm
R13330:13338 Coq.Lists.List <> app_nil_l thm
R13401:13403 Coq.Init.Datatypes <> nil constr
R13401:13403 Coq.Init.Datatypes <> nil constr
prf 13496:13513 <> set_prod_right_nil
binder 13528:13528 <> T:128
R13547:13550 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13541:13544 Coq.Init.Datatypes <> list ind
R13546:13546 Reg2Reg <> T:128 var
binder 13537:13537 <> s:129
R13584:13587 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'=='_x not
R13566:13575 Reg2Reg <> set_prod def
R13579:13579 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'['_x_']' not
R13583:13583 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:'['_x_']' not
R13580:13582 Coq.Init.Datatypes <> nil constr
R13577:13577 Reg2Reg <> s:129 var
R13588:13588 Reg2Reg <> s:129 var
R13609:13618 Reg2Reg <> set_prod def
R13764:13772 Coq.Lists.List <> app_nil_r thm
R13764:13772 Coq.Lists.List <> app_nil_r thm
R13764:13772 Coq.Lists.List <> app_nil_r thm
R13838:13840 Coq.Init.Datatypes <> nil constr
R13838:13840 Coq.Init.Datatypes <> nil constr
R13905:13913 Coq.Lists.List <> app_nil_r thm
R13905:13913 Coq.Lists.List <> app_nil_r thm
R13905:13913 Coq.Lists.List <> app_nil_r thm
prf 13941:13963 <> reduce_EmptyStr_correct
binder 13978:13978 <> T:130
R13991:13999 Reg2Reg <> reg_exp ind
R14001:14001 Reg2Reg <> T:130 var
binder 13987:13987 <> r:131
R14029:14032 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14014:14016 Coq.Init.Logic <> ::type_scope:x_'='_x not
R14013:14013 Reg2Reg <> r:131 var
R14017:14028 Reg2Reg <> EmptyStr_r constr
R14033:14048 Reg2Reg <> reduce_correct_p def
R14050:14050 Reg2Reg <> r:131 var
prf 14077:14095 <> reduce_Char_correct
binder 14110:14110 <> T:132
R14123:14131 Reg2Reg <> reg_exp ind
R14133:14133 Reg2Reg <> T:132 var
binder 14119:14119 <> r:133
R14142:14145 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14141:14141 Reg2Reg <> T:132 var
binder 14137:14137 <> t:134
R14175:14178 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14162:14164 Coq.Init.Logic <> ::type_scope:x_'='_x not
R14161:14161 Reg2Reg <> r:133 var
R14165:14172 Reg2Reg <> Char_r constr
R14174:14174 Reg2Reg <> t:134 var
R14179:14194 Reg2Reg <> reduce_correct_p def
R14196:14196 Reg2Reg <> r:133 var
prf 14223:14243 <> reduce_Concat_correct
binder 14258:14258 <> T:135
R14277:14285 Reg2Reg <> reg_exp ind
R14287:14287 Reg2Reg <> T:135 var
binder 14267:14267 <> r:136
binder 14269:14270 <> r1:137
binder 14272:14273 <> r2:138
R14319:14322 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14300:14302 Coq.Init.Logic <> ::type_scope:x_'='_x not
R14299:14299 Reg2Reg <> r:136 var
R14303:14312 Reg2Reg <> Concat_r constr
R14317:14318 Reg2Reg <> r2:138 var
R14314:14315 Reg2Reg <> r1:137 var
R14342:14345 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14323:14338 Reg2Reg <> reduce_correct_p def
R14340:14341 Reg2Reg <> r1:137 var
R14365:14368 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14346:14361 Reg2Reg <> reduce_correct_p def
R14363:14364 Reg2Reg <> r2:138 var
R14369:14384 Reg2Reg <> reduce_correct_p def
R14386:14386 Reg2Reg <> r:136 var
R14403:14418 Reg2Reg <> reduce_correct_p def
R14439:14444 Reg2Reg <> reduce def
R14439:14444 Reg2Reg <> reduce def
R14468:14473 Reg2Reg <> reduce def
R14468:14473 Reg2Reg <> reduce def
R14505:14511 Coq.Init.Logic <> eq_refl constr
R14505:14511 Coq.Init.Logic <> eq_refl constr
R14532:14538 Coq.Init.Logic <> eq_refl constr
R14532:14538 Coq.Init.Logic <> eq_refl constr
R14612:14625 Reg2Reg <> set_prod_equiv thm
R14612:14625 Reg2Reg <> set_prod_equiv thm
R14690:14706 Reg2Reg <> set_prod_left_nil thm
R14731:14748 Reg2Reg <> set_prod_right_nil thm
R14784:14797 Reg2Reg <> set_prod_equiv thm
R14690:14706 Reg2Reg <> set_prod_left_nil thm
R14690:14706 Reg2Reg <> set_prod_left_nil thm
R14690:14706 Reg2Reg <> set_prod_left_nil thm
R14690:14706 Reg2Reg <> set_prod_left_nil thm
R14690:14706 Reg2Reg <> set_prod_left_nil thm
R14690:14706 Reg2Reg <> set_prod_left_nil thm
R14690:14706 Reg2Reg <> set_prod_left_nil thm
R14690:14706 Reg2Reg <> set_prod_left_nil thm
R14690:14706 Reg2Reg <> set_prod_left_nil thm
R14690:14706 Reg2Reg <> set_prod_left_nil thm
R14690:14706 Reg2Reg <> set_prod_left_nil thm
R14690:14706 Reg2Reg <> set_prod_left_nil thm
R14690:14706 Reg2Reg <> set_prod_left_nil thm
R14690:14706 Reg2Reg <> set_prod_left_nil thm
R14690:14706 Reg2Reg <> set_prod_left_nil thm
R14690:14706 Reg2Reg <> set_prod_left_nil thm
R14690:14706 Reg2Reg <> set_prod_left_nil thm
R14690:14706 Reg2Reg <> set_prod_left_nil thm
R14690:14706 Reg2Reg <> set_prod_left_nil thm
R14690:14706 Reg2Reg <> set_prod_left_nil thm
R14690:14706 Reg2Reg <> set_prod_left_nil thm
R14690:14706 Reg2Reg <> set_prod_left_nil thm
R14690:14706 Reg2Reg <> set_prod_left_nil thm
R14690:14706 Reg2Reg <> set_prod_left_nil thm
R14690:14706 Reg2Reg <> set_prod_left_nil thm
R14731:14748 Reg2Reg <> set_prod_right_nil thm
R14731:14748 Reg2Reg <> set_prod_right_nil thm
R14731:14748 Reg2Reg <> set_prod_right_nil thm
R14731:14748 Reg2Reg <> set_prod_right_nil thm
R14731:14748 Reg2Reg <> set_prod_right_nil thm
R14731:14748 Reg2Reg <> set_prod_right_nil thm
R14731:14748 Reg2Reg <> set_prod_right_nil thm
R14731:14748 Reg2Reg <> set_prod_right_nil thm
R14731:14748 Reg2Reg <> set_prod_right_nil thm
R14731:14748 Reg2Reg <> set_prod_right_nil thm
R14731:14748 Reg2Reg <> set_prod_right_nil thm
R14731:14748 Reg2Reg <> set_prod_right_nil thm
R14731:14748 Reg2Reg <> set_prod_right_nil thm
R14731:14748 Reg2Reg <> set_prod_right_nil thm
R14731:14748 Reg2Reg <> set_prod_right_nil thm
R14731:14748 Reg2Reg <> set_prod_right_nil thm
R14731:14748 Reg2Reg <> set_prod_right_nil thm
R14731:14748 Reg2Reg <> set_prod_right_nil thm
R14731:14748 Reg2Reg <> set_prod_right_nil thm
R14731:14748 Reg2Reg <> set_prod_right_nil thm
R14784:14797 Reg2Reg <> set_prod_equiv thm
R14784:14797 Reg2Reg <> set_prod_equiv thm
R14784:14797 Reg2Reg <> set_prod_equiv thm
R14784:14797 Reg2Reg <> set_prod_equiv thm
R14784:14797 Reg2Reg <> set_prod_equiv thm
R14784:14797 Reg2Reg <> set_prod_equiv thm
R14784:14797 Reg2Reg <> set_prod_equiv thm
R14784:14797 Reg2Reg <> set_prod_equiv thm
R14784:14797 Reg2Reg <> set_prod_equiv thm
R14784:14797 Reg2Reg <> set_prod_equiv thm
R14784:14797 Reg2Reg <> set_prod_equiv thm
R14784:14797 Reg2Reg <> set_prod_equiv thm
R14784:14797 Reg2Reg <> set_prod_equiv thm
R14784:14797 Reg2Reg <> set_prod_equiv thm
R14784:14797 Reg2Reg <> set_prod_equiv thm
R14784:14797 Reg2Reg <> set_prod_equiv thm
prf 14857:14876 <> reduce_Union_correct
binder 14891:14891 <> T:139
R14910:14918 Reg2Reg <> reg_exp ind
R14920:14920 Reg2Reg <> T:139 var
binder 14900:14900 <> r:140
binder 14902:14903 <> r1:141
binder 14905:14906 <> r2:142
R14951:14954 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14933:14935 Coq.Init.Logic <> ::type_scope:x_'='_x not
R14932:14932 Reg2Reg <> r:140 var
R14936:14944 Reg2Reg <> Union_r constr
R14949:14950 Reg2Reg <> r2:142 var
R14946:14947 Reg2Reg <> r1:141 var
R14974:14977 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14955:14970 Reg2Reg <> reduce_correct_p def
R14972:14973 Reg2Reg <> r1:141 var
R14997:15000 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R14978:14993 Reg2Reg <> reduce_correct_p def
R14995:14996 Reg2Reg <> r2:142 var
R15001:15016 Reg2Reg <> reduce_correct_p def
R15018:15018 Reg2Reg <> r:140 var
prf 15045:15063 <> reduce_Star_correct
binder 15078:15078 <> T:143
R15094:15102 Reg2Reg <> reg_exp ind
R15104:15104 Reg2Reg <> T:143 var
binder 15087:15087 <> r:144
binder 15089:15090 <> r1:145
R15131:15134 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R15117:15119 Coq.Init.Logic <> ::type_scope:x_'='_x not
R15116:15116 Reg2Reg <> r:144 var
R15120:15127 Reg2Reg <> Star_r constr
R15129:15130 Reg2Reg <> r1:145 var
R15154:15157 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R15135:15150 Reg2Reg <> reduce_correct_p def
R15152:15153 Reg2Reg <> r1:145 var
R15158:15173 Reg2Reg <> reduce_correct_p def
R15175:15175 Reg2Reg <> r:144 var
prf 15263:15276 <> reduce_correct
binder 15291:15291 <> T:146
R15299:15307 Reg2Reg <> reg_exp ind
R15309:15309 Reg2Reg <> T:146 var
binder 15295:15295 <> r:147
R15321:15336 Reg2Reg <> reduce_correct_p def
R15338:15338 Reg2Reg <> r:147 var
R15369:15391 Reg2Reg <> reduce_EmptyStr_correct prfax
R15369:15391 Reg2Reg <> reduce_EmptyStr_correct prfax
R15420:15438 Reg2Reg <> reduce_Char_correct prfax
R15455:15461 Coq.Init.Logic <> eq_refl constr
R15441:15448 Reg2Reg <> Char_r constr
R15470:15470 SetsClass.SetProd <> H def
R15420:15438 Reg2Reg <> reduce_Char_correct prfax
R15455:15461 Coq.Init.Logic <> eq_refl constr
R15441:15448 Reg2Reg <> Char_r constr
R15486:15506 Reg2Reg <> reduce_Concat_correct thm
R15533:15539 Coq.Init.Logic <> eq_refl constr
R15509:15518 Reg2Reg <> Concat_r constr
R15558:15558 SetsClass.SetProd <> H def
R15486:15506 Reg2Reg <> reduce_Concat_correct thm
R15533:15539 Coq.Init.Logic <> eq_refl constr
R15509:15518 Reg2Reg <> Concat_r constr
R15574:15593 Reg2Reg <> reduce_Union_correct prfax
R15619:15625 Coq.Init.Logic <> eq_refl constr
R15596:15604 Reg2Reg <> Union_r constr
R15644:15644 SetsClass.SetProd <> H def
R15574:15593 Reg2Reg <> reduce_Union_correct prfax
R15619:15625 Coq.Init.Logic <> eq_refl constr
R15596:15604 Reg2Reg <> Union_r constr
R15660:15678 Reg2Reg <> reduce_Star_correct prfax
R15695:15701 Coq.Init.Logic <> eq_refl constr
R15681:15688 Reg2Reg <> Star_r constr
R15714:15714 SetsClass.SetProd <> H def
R15660:15678 Reg2Reg <> reduce_Star_correct prfax
R15695:15701 Coq.Init.Logic <> eq_refl constr
R15681:15688 Reg2Reg <> Star_r constr
def 15782:15788 <> simpl_p
binder 15791:15791 <> T:148
R15799:15807 Reg2Reg <> reg_exp ind
R15809:15809 Reg2Reg <> T:148 var
binder 15795:15795 <> r:149
R15832:15832 Reg2Reg <> r:149 var
R15845:15856 Reg2Reg <> EmptyStr_r constr
R15861:15864 Coq.Init.Logic <> True ind
R15872:15879 Reg2Reg <> Char_r constr
R15886:15889 Coq.Init.Logic <> True ind
R15897:15906 Reg2Reg <> Concat_r constr
R15935:15938 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R15919:15922 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R15923:15934 Reg2Reg <> EmptyStr_r constr
R15949:15952 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R15939:15945 Reg2Reg <> simpl_p:150 def
R15971:15974 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R15955:15958 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R15959:15970 Reg2Reg <> EmptyStr_r constr
R15975:15981 Reg2Reg <> simpl_p:150 def
R15992:16000 Reg2Reg <> Union_r constr
R16021:16024 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R16011:16017 Reg2Reg <> simpl_p:150 def
R16025:16031 Reg2Reg <> simpl_p:150 def
R16042:16049 Reg2Reg <> Star_r constr
R16056:16062 Reg2Reg <> simpl_p:150 def
R16064:16064 Reg2Reg <> r:149 var
prf 16082:16100 <> reduce_Concat_simpl
binder 16115:16115 <> T:152
R16129:16137 Reg2Reg <> reg_exp ind
R16139:16139 Reg2Reg <> T:152 var
binder 16119:16119 <> r:153
binder 16121:16122 <> r1:154
binder 16124:16125 <> r2:155
R16171:16174 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R16152:16154 Coq.Init.Logic <> ::type_scope:x_'='_x not
R16151:16151 Reg2Reg <> r:153 var
R16155:16164 Reg2Reg <> Concat_r constr
R16169:16170 Reg2Reg <> r2:155 var
R16166:16167 Reg2Reg <> r1:154 var
R16194:16197 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R16175:16181 Reg2Reg <> simpl_p def
R16184:16189 Reg2Reg <> reduce def
R16191:16192 Reg2Reg <> r1:154 var
R16217:16220 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R16198:16204 Reg2Reg <> simpl_p def
R16207:16212 Reg2Reg <> reduce def
R16214:16215 Reg2Reg <> r2:155 var
R16221:16227 Reg2Reg <> simpl_p def
R16230:16235 Reg2Reg <> reduce def
R16237:16237 Reg2Reg <> r:153 var
R16296:16301 Reg2Reg <> reduce def
R16296:16301 Reg2Reg <> reduce def
R16329:16334 Reg2Reg <> reduce def
R16329:16334 Reg2Reg <> reduce def
prf 16495:16506 <> reduce_simpl
binder 16521:16521 <> T:156
R16532:16540 Reg2Reg <> reg_exp ind
R16542:16542 Reg2Reg <> T:156 var
binder 16525:16525 <> r:157
binder 16527:16528 <> r0:158
R16569:16572 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R16556:16559 Coq.Init.Logic <> ::type_scope:x_'='_x not
R16568:16568 Coq.Init.Logic <> ::type_scope:x_'='_x not
R16554:16555 Reg2Reg <> r0:158 var
R16560:16565 Reg2Reg <> reduce def
R16567:16567 Reg2Reg <> r:157 var
R16573:16579 Reg2Reg <> simpl_p def
R16581:16582 Reg2Reg <> r0:158 var
R16623:16623 SetsClass.SetProd <> H def
R16658:16658 SetsClass.SetProd <> H def
R16713:16731 Reg2Reg <> reduce_Concat_simpl thm
R16800:16805 Reg2Reg <> reduce def
R16811:16817 Coq.Init.Logic <> eq_refl constr
R16773:16778 Reg2Reg <> reduce def
R16784:16790 Coq.Init.Logic <> eq_refl constr
R16758:16764 Coq.Init.Logic <> eq_refl constr
R16734:16743 Reg2Reg <> Concat_r constr
R16713:16731 Reg2Reg <> reduce_Concat_simpl thm
R16800:16805 Reg2Reg <> reduce def
R16811:16817 Coq.Init.Logic <> eq_refl constr
R16773:16778 Reg2Reg <> reduce def
R16784:16790 Coq.Init.Logic <> eq_refl constr
R16758:16764 Coq.Init.Logic <> eq_refl constr
R16734:16743 Reg2Reg <> Concat_r constr
prf 17011:17030 <> trans_reduce_correct
binder 17046:17046 <> T:159
R17054:17062 Reg2Reg <> reg_exp ind
R17064:17064 Reg2Reg <> T:159 var
binder 17050:17051 <> r0:160
R17073:17081 Reg2Reg <> reg_exp ind
R17083:17083 Reg2Reg <> T:159 var
binder 17068:17069 <> r1:161
R17113:17116 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R17102:17104 Coq.Init.Logic <> ::type_scope:x_'='_x not
R17095:17098 Reg2Reg <> Data constr
R17100:17101 Reg2Reg <> r1:161 var
R17105:17109 Reg2Reg <> trans def
R17111:17112 Reg2Reg <> r0:160 var
R17140:17143 SetsClass.SetsClass_AxiomFree SetsNotation ::sets_scope:x_'=='_x not
R17117:17127 Reg2Reg <> exp_match def
R17130:17135 Reg2Reg <> reduce def
R17137:17138 Reg2Reg <> r1:161 var
R17144:17154 Reg2Reg <> exp_match def
R17156:17157 Reg2Reg <> r0:160 var
R17194:17207 Reg2Reg <> reduce_correct thm
R17194:17207 Reg2Reg <> reduce_correct thm
R17224:17239 Reg2Reg <> reduce_correct_p def
R17261:17265 Reg2Reg <> trans def
R17261:17265 Reg2Reg <> trans def
R17354:17366 Reg2Reg <> trans_correct thm
R17354:17366 Reg2Reg <> trans_correct thm
R17383:17397 Reg2Reg <> trans_correct_p def
R17489:17504 Reg2Reg <> reduce_correct_p def
R17537:17542 Reg2Reg <> reduce def
R17537:17542 Reg2Reg <> reduce def
R17583:17589 Coq.Init.Logic <> eq_refl constr
R17583:17589 Coq.Init.Logic <> eq_refl constr
